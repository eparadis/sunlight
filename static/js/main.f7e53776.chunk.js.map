{"version":3,"sources":["App.tsx","index.tsx"],"names":["Hello","Slider","props","className","label","value","type","min","max","onChange","event","update","Number","target","Result","DraggableCicle","useState","isDragging","setDragging","x","y","clickDownPt","setClickDownPt","delta","setDelta","cx","center","cy","ev","clientX","clientY","fill","r","onMouseDown","onMouseUp","draggedTo","onMouseLeave","onMouseMove","Gnomon","width","height","Shadow","fillOpacity","points","sunX","calcZ","App","setX","setY","sunY","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kMA8BA,IAAMA,EAAQ,WACZ,OACE,4BACE,uDAKAC,EAAS,SAACC,GAId,OACE,sBAAKC,UAAU,mBAAf,UACE,8BAAID,EAAME,MAAV,MAAmB,+BAAOF,EAAMG,WAChC,uBAAOC,KAAK,QAAQC,IAAKL,EAAMK,IAAKC,IAAKN,EAAMM,IAAKC,SANvC,SAACC,GAChBR,EAAMS,OAAOC,OAAOF,EAAMG,OAAOR,SAKyCA,MAAOH,EAAMG,YAKrFS,EAAS,SAACZ,GACd,OACE,8BACE,8BAAIA,EAAME,MAAV,MAAoBF,EAAMG,YAK1BU,EAAiB,SAACb,GAAkF,MAItEc,oBAAS,GAJ6D,mBAIjGC,EAJiG,KAIrFC,EAJqF,OAKlEF,mBAAS,CAACG,EAAG,EAAGC,EAAG,IAL+C,mBAKjGC,EALiG,KAKpFC,EALoF,OAM9EN,mBAAS,CAACG,EAAG,EAAGC,EAAG,IAN2D,mBAMjGG,EANiG,KAM1FC,EAN0F,KAQlGC,EAAKvB,EAAMwB,OAAOP,EAAII,EAAMJ,EAC5BQ,EAAKzB,EAAMwB,OAAON,EAAIG,EAAMH,EAE5BT,EAAS,SAACiB,GAKdJ,EAJKP,EAII,CACPE,EAAGS,EAAGC,QAAUR,EAAYF,EAC5BC,EAAGQ,EAAGE,QAAUT,EAAYD,GALnB,CAAED,EAAG,EAAGC,EAAG,KASxB,OACE,wBACEW,KAAM,SACNC,EAAGf,EAAa,GAAK,GACrBQ,GAAE,UAAKA,GAAME,GAAE,UAAKA,GAEpBM,YAAa,SAACL,GACZN,EAAe,CAAEH,EAAGS,EAAGC,QAAST,EAAGQ,EAAGE,UACtCZ,GAAY,IAEdgB,UAAW,WACThB,GAAY,GACZhB,EAAMiC,UAAUV,EAAIE,GACpBH,EAAS,CAACL,EAAG,EAAGC,EAAG,KAErBgB,aAAczB,EACd0B,YAAa1B,KAKb2B,EAAS,SAACpC,GACd,OACE,sBACEiB,EAAG,IACHC,EAAG,IACHmB,MAAO,GACPC,OAAQ,OAKRC,EAAS,SAACvC,GACd,OACE,yBACE6B,KAAK,OACLW,YAAY,MACZC,OAAM,0BAAqB,IAAIzC,EAAM0C,KAA/B,WAKNC,EAAQ,SAAC1B,EAAUC,GACvB,OAAOD,EAAEC,GAGI0B,EA3Hf,WAAgB,IAAD,EACK9B,mBAAS,IADd,mBACNG,EADM,KACH4B,EADG,OAEK/B,mBAAS,IAFd,mBAENI,EAFM,KAEH4B,EAFG,KAIb,OACE,sBAAK7C,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAQQ,OAAQoC,EAAM1C,MAAOc,EAAGf,MAAO,IAAKG,IAAK,EAAGC,IAAK,MACzD,cAAC,EAAD,CAAQG,OAAQqC,EAAM3C,MAAOe,EAAGhB,MAAO,IAAKG,IAAK,EAAGC,IAAK,MACzD,cAAC,EAAD,CAAQJ,MAAO,IAAKC,MAAOwC,EAAM1B,EAAGC,KAEpC,4BAAG,sBAAKmB,MAAO,IAAKC,OAAQ,IAAzB,UACD,sBAAMD,MAAO,OAAQC,OAAQ,OAAQT,KAAK,SAC1C,cAAC,EAAD,CAAgBL,OAAQ,CAACP,EAAGA,EAAGC,EAAGA,GAChCe,UAAW,SAAChB,EAAEC,GACZ2B,EAAK5B,GACL6B,EAAK5B,MAGT,cAAC,EAAD,CAAQwB,KAAMzB,EAAG8B,KAAM7B,IACvB,cAAC,EAAD,aCjBR8B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.f7e53776.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [x, setX] = useState(66)\n  const [y, setY] = useState(80)\n\n  return (\n    <div className=\"App\">\n      <Hello />\n      <Slider update={setX} value={x} label={\"X\"} min={0} max={300} />\n      <Slider update={setY} value={y} label={\"Y\"} min={0} max={300} />\n      <Result label={\"Z\"} value={calcZ(x, y)} />\n      \n      <p><svg width={300} height={300}>\n        <rect width={\"100%\"} height={\"100%\"} fill=\"#DDD\"/>\n        <DraggableCicle center={{x: x, y: y}} \n          draggedTo={(x,y)=>{\n            setX(x)\n            setY(y)\n          }\n        }/>\n        <Shadow sunX={x} sunY={y}/>\n        <Gnomon />\n      </svg>\n      </p>\n    </div>\n  );\n}\n\nconst Hello = () => {\n  return (\n    <p>\n      <code>Seattle Sunlight</code>\n    </p>\n  )\n}\n\nconst Slider = (props: { min: number, max: number, label: string, update: (v: number) => void, value: number })  => {\n  const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    props.update(Number(event.target.value))\n  }\n  return (\n    <div className=\"adjustable-value\">\n      <p>{props.label} = <span>{props.value}</span></p>\n      <input type='range' min={props.min} max={props.max} onChange={onChange} value={props.value}  />\n    </div>\n  )\n}\n\nconst Result = (props: {label: string, value: number}) => {\n  return (\n    <div>\n      <p>{props.label} = {props.value}</p>\n    </div>\n  )\n}\n\nconst DraggableCicle = (props: { center: {x:number, y:number}, draggedTo: (x:number, y:number)=>void}) => {\n  // see https://dev.to/tvanantwerp/dragging-svgs-with-react-38h6\n  // and https://www.sitepoint.com/how-to-translate-from-dom-to-svg-coordinates-and-back-again/\n\n  const [isDragging, setDragging] = useState(false)\n  const [clickDownPt, setClickDownPt] = useState({x: 0, y: 0})\n  const [delta, setDelta] = useState({x: 0, y: 0})\n\n  const cx = props.center.x + delta.x\n  const cy = props.center.y + delta.y\n\n  const update = (ev: React.MouseEvent<SVGCircleElement, MouseEvent>): void => {\n    if (!isDragging) {\n      setDelta({ x: 0, y: 0 });\n      return;\n    }\n    setDelta({\n      x: ev.clientX - clickDownPt.x,\n      y: ev.clientY - clickDownPt.y\n    });\n  };\n\n  return (\n    <circle\n      fill={\"yellow\"}\n      r={isDragging ? 15 : 10}\n      cx={`${cx}`} cy={`${cy}`}\n      // transform={`translate(${cx},${cy})`}\n      onMouseDown={(ev)=>{\n        setClickDownPt({ x: ev.clientX, y: ev.clientY})\n        setDragging(true)\n      }}\n      onMouseUp={()=>{\n        setDragging(false)\n        props.draggedTo(cx, cy)\n        setDelta({x: 0, y: 0})\n      }}\n      onMouseLeave={update}\n      onMouseMove={update}\n    />\n  )\n}\n\nconst Gnomon = (props: {}) => {\n  return (\n    <rect\n      x={150}\n      y={180}\n      width={10}\n      height={100}\n    />\n  )\n}\n\nconst Shadow = (props: {sunX:number, sunY: number}) => {\n  return (\n    <polygon\n      fill=\"#444\"\n      fillOpacity=\"0.5\"\n      points={`155,180 150,290 ${300-props.sunX},290`}\n    />\n  )\n}\n\nconst calcZ = (x: number,y:number) => {\n  return x+y\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}